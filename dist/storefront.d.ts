import { StorefrontApiClient } from "@shopify/storefront-api-client";
import { Cart, CartLine, ComponentizableCartLine, MoneyV2 } from "../types/storefront-api-types";
interface ShopifyConfig {
    $cart?: string | false;
    $checkout?: string | false;
    $count?: string | false;
    $link?: string | false;
    $lines?: string | false;
    $quantity?: string | false;
    $subtotal?: string | false;
    $total?: string | false;
    apiVersion?: string;
    errorClass?: string;
    isEmptyClass?: string;
    isLoadingClass?: string;
    itemTemplate?: string;
    language?: string;
    parent?: ParentNode;
    thumbnailMaxWidth?: number;
    thumbnailMaxHeight?: number;
    storageKey?: string;
    useQuantity?: boolean;
    timeoutDuration?: number;
}
export default class Shopify implements ShopifyConfig {
    $cart: string;
    $count: string;
    $checkout: string;
    $lines: string;
    $link: string;
    $quantity: string;
    $subtotal: string;
    $total: string;
    apiVersion: string;
    cartId: string | null;
    cart: Cart;
    client: StorefrontApiClient;
    errorClass: string;
    isEmptyClass: string;
    isLoadingClass: string;
    lineCount: number;
    totalQuantity: number;
    itemTemplate: string | undefined;
    parent: Document;
    storageKey: string;
    language: string | undefined;
    thumbnailMaxWidth: number;
    thumbnailMaxHeight: number;
    timeout: number | undefined;
    timeoutDuration: number;
    useQuantity: boolean;
    constructor(domain: string, token: string, config?: ShopifyConfig);
    private loadCart;
    private createCart;
    addLine(variantId: string, quantity?: number): Promise<void>;
    updateLine(lineItemId: string, quantity: number): Promise<void>;
    private cartLinesUpdate;
    removeLine(lineItemId: string): Promise<void>;
    clearLines(): Promise<void>;
    afterInit(): void;
    onQuantityChange: ($input: HTMLInputElement) => void;
    renderCart(): void;
    updateCart(): void;
    renderCartCount(): void;
    renderCheckout(): void;
    renderLines(): void;
    renderLine(line: CartLine | ComponentizableCartLine): string;
    renderTotals(): void;
    renderLineTemplate(params: object): string;
    renderError(error?: string): void;
    toggleEmpty(): void;
    setLoading(value?: boolean): void;
    formatPrice: (money: MoneyV2) => string;
    request(operation: string, params?: object): Promise<any>;
    queryAll: (selector: string | false, callback?: (value: HTMLElement, key?: number, parent?: NodeListOf<HTMLElement>) => void) => NodeListOf<HTMLElement> | void;
}
export {};
